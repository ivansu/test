##################################################
# file: SchoolInfoService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /home/farhad/job/eduschl/src/web_edu/wsdl2py.py -b ./info.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# urn:bars-web-school-info
##############################

class ns0:
    targetNamespace = "urn:bars-web-school-info"

    class Any_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:bars-web-school-info"
        type = (schema, "Any")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Any_Def.schema
            TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._any = []
                    return
            Holder.__name__ = "Any_Holder"
            self.pyclass = Holder

    class Inn_Def(ZSI.TC.AnyType, TypeDefinition):
        schema = "urn:bars-web-school-info"
        type = (schema, "Inn")
        def __init__(self, pname, **kw):
            ZSI.TC.AnyType.__init__(self, pname, **kw)

    class AuthToken_Def(ZSI.TC.Token, TypeDefinition):
        schema = "urn:bars-web-school-info"
        type = (schema, "AuthToken")
        def __init__(self, pname, **kw):
            ZSI.TC.Token.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class String_Def(ZSI.TC.AnyType, TypeDefinition):
        schema = "urn:bars-web-school-info"
        type = (schema, "String")
        def __init__(self, pname, **kw):
            ZSI.TC.AnyType.__init__(self, pname, **kw)

    class Error_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:bars-web-school-info"
        type = (schema, "Error")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Error_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname=(ns,"errorCode"), aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","String",lazy=False)(pname=(ns,"errorMessage"), aname="_errorMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._errorCode = None
                    self._errorMessage = None
                    return
            Holder.__name__ = "Error_Holder"
            self.pyclass = Holder

    class Employee_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:bars-web-school-info"
        type = (schema, "Employee")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Employee_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"sname"), aname="_sname", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"fname"), aname="_fname", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"mname"), aname="_mname", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"position"), aname="_position", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sname = None
                    self._fname = None
                    self._mname = None
                    self._position = None
                    return
            Holder.__name__ = "Employee_Holder"
            self.pyclass = Holder

    class ResultArtefact_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:bars-web-school-info"
        type = (schema, "ResultArtefact")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ResultArtefact_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"documentId"), aname="_documentId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"mimeType"), aname="_mimeType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"documentTypeCode"), aname="_documentTypeCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"documentName"), aname="_documentName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"text"), aname="_text", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._documentId = None
                    self._mimeType = None
                    self._documentTypeCode = None
                    self._documentName = None
                    self._text = None
                    return
            Holder.__name__ = "ResultArtefact_Holder"
            self.pyclass = Holder

    class Document_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "urn:bars-web-school-info"
        type = (schema, "Document")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Document_Def.schema
            TClist = [ZSI.TC.Base64String(pname=(ns,"content"), aname="_content", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ResultArtefact_Def not in ns0.Document_Def.__bases__:
                bases = list(ns0.Document_Def.__bases__)
                bases.insert(0, ns0.ResultArtefact_Def)
                ns0.Document_Def.__bases__ = tuple(bases)

            ns0.ResultArtefact_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Url_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "urn:bars-web-school-info"
        type = (schema, "Url")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Url_Def.schema
            TClist = [ZSI.TC.AnyType(pname=(ns,"url"), aname="_url", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ResultArtefact_Def not in ns0.Url_Def.__bases__:
                bases = list(ns0.Url_Def.__bases__)
                bases.insert(0, ns0.ResultArtefact_Def)
                ns0.Url_Def.__bases__ = tuple(bases)

            ns0.ResultArtefact_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Documents_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:bars-web-school-info"
        type = (schema, "Documents")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Documents_Def.schema
            TClist = [GTD("urn:bars-web-school-info","Document",lazy=False)(pname=(ns,"document"), aname="_document", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._document = []
                    return
            Holder.__name__ = "Documents_Holder"
            self.pyclass = Holder

    class Urls_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:bars-web-school-info"
        type = (schema, "Urls")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Urls_Def.schema
            TClist = [GTD("urn:bars-web-school-info","Url",lazy=False)(pname=(ns,"url"), aname="_url", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._url = []
                    return
            Holder.__name__ = "Urls_Holder"
            self.pyclass = Holder

    class OrgExternal_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:bars-web-school-info"
        type = (schema, "OrgExternal")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.OrgExternal_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"regionCode"), aname="_regionCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"serviceOrgCode"), aname="_serviceOrgCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","Employee",lazy=False)(pname=(ns,"employee"), aname="_employee", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._regionCode = None
                    self._serviceOrgCode = None
                    self._employee = None
                    return
            Holder.__name__ = "OrgExternal_Holder"
            self.pyclass = Holder

    class RequestHeader_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:bars-web-school-info"
        type = (schema, "RequestHeader")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RequestHeader_Def.schema
            TClist = [GTD("urn:bars-web-school-info","AuthToken",lazy=False)(pname=(ns,"authToken"), aname="_authToken", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","String",lazy=False)(pname=(ns,"requestId"), aname="_requestId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","OrgExternal",lazy=False)(pname=(ns,"requestInitiatorCode"), aname="_requestInitiatorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","OrgExternal",lazy=False)(pname=(ns,"orgRegistrator"), aname="_orgRegistrator", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","String",lazy=False)(pname=(ns,"requestTypeCode"), aname="_requestTypeCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"requestDate"), aname="_requestDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","Documents",lazy=False)(pname=(ns,"documents"), aname="_documents", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._authToken = None
                    self._requestId = None
                    self._requestInitiatorCode = None
                    self._orgRegistrator = None
                    self._requestTypeCode = None
                    self._requestDate = None
                    self._documents = None
                    return
            Holder.__name__ = "RequestHeader_Holder"
            self.pyclass = Holder

    class EServiceHeader_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:bars-web-school-info"
        type = (schema, "EServiceHeader")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.EServiceHeader_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname=(ns,"userId"), aname="_userId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"eserviceId"), aname="_eserviceId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","String",lazy=False)(pname=(ns,"reestrId"), aname="_reestrId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"stateOrgId"), aname="_stateOrgId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"orderDate"), aname="_orderDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._userId = None
                    self._eserviceId = None
                    self._reestrId = None
                    self._stateOrgId = None
                    self._orderDate = None
                    return
            Holder.__name__ = "EServiceHeader_Holder"
            self.pyclass = Holder

    class ResponseHeader_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:bars-web-school-info"
        type = (schema, "ResponseHeader")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ResponseHeader_Def.schema
            TClist = [GTD("urn:bars-web-school-info","AuthToken",lazy=False)(pname=(ns,"authToken"), aname="_authToken", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"responseDate"), aname="_responseDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","OrgExternal",lazy=False)(pname=(ns,"requestInitiatorCode"), aname="_requestInitiatorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","String",lazy=False)(pname=(ns,"requestIDRef"), aname="_requestIDRef", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","Error",lazy=False)(pname=(ns,"error"), aname="_error", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._authToken = None
                    self._responseDate = None
                    self._requestInitiatorCode = None
                    self._requestIDRef = None
                    self._error = None
                    return
            Holder.__name__ = "ResponseHeader_Holder"
            self.pyclass = Holder

    class EServiceResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:bars-web-school-info"
        type = (schema, "EServiceResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.EServiceResult_Def.schema
            TClist = [GTD("urn:bars-web-school-info","String",lazy=False)(pname=(ns,"orderStatusId"), aname="_orderStatusId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","String",lazy=False)(pname=(ns,"comment"), aname="_comment", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","String",lazy=False)(pname=(ns,"extOrderNumber"), aname="_extOrderNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","Urls",lazy=False)(pname=(ns,"urls"), aname="_urls", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","Documents",lazy=False)(pname=(ns,"documents"), aname="_documents", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","Any",lazy=False)(pname=(ns,"XML"), aname="_XML", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderStatusId = None
                    self._comment = None
                    self._extOrderNumber = None
                    self._urls = None
                    self._documents = None
                    self._XML = None
                    return
            Holder.__name__ = "EServiceResult_Holder"
            self.pyclass = Holder

    class listUnitKindsRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:bars-web-school-info"
        type = (schema, "listUnitKindsRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.listUnitKindsRequest_Def.schema
            TClist = [GTD("urn:bars-web-school-info","RequestHeader",lazy=False)(pname=(ns,"requestHeader"), aname="_requestHeader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","EServiceHeader",lazy=False)(pname=(ns,"eServiceHeader"), aname="_eServiceHeader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"unitType"), aname="_unitType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requestHeader = None
                    self._eServiceHeader = None
                    self._unitType = None
                    return
            Holder.__name__ = "listUnitKindsRequest_Holder"
            self.pyclass = Holder

    class listUnitKindsResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:bars-web-school-info"
        type = (schema, "listUnitKindsResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.listUnitKindsResponse_Def.schema
            TClist = [GTD("urn:bars-web-school-info","ResponseHeader",lazy=False)(pname=(ns,"responseHeader"), aname="_responseHeader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","EServiceResult",lazy=False)(pname=(ns,"eServiceResult"), aname="_eServiceResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","unitKind",lazy=False)(pname=(ns,"returns"), aname="_returns", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._responseHeader = None
                    self._eServiceResult = None
                    self._returns = []
                    return
            Holder.__name__ = "listUnitKindsResponse_Holder"
            self.pyclass = Holder

    class unitKind_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:bars-web-school-info"
        type = (schema, "unitKind")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.unitKind_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"id"), aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._id = None
                    return
            Holder.__name__ = "unitKind_Holder"
            self.pyclass = Holder

    class listUnitsRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:bars-web-school-info"
        type = (schema, "listUnitsRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.listUnitsRequest_Def.schema
            TClist = [GTD("urn:bars-web-school-info","RequestHeader",lazy=False)(pname=(ns,"requestHeader"), aname="_requestHeader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","EServiceHeader",lazy=False)(pname=(ns,"eServiceHeader"), aname="_eServiceHeader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"types"), aname="_types", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"kinds"), aname="_kinds", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"areas"), aname="_areas", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requestHeader = None
                    self._eServiceHeader = None
                    self._types = []
                    self._kinds = []
                    self._areas = []
                    return
            Holder.__name__ = "listUnitsRequest_Holder"
            self.pyclass = Holder

    class listUnitsResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:bars-web-school-info"
        type = (schema, "listUnitsResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.listUnitsResponse_Def.schema
            TClist = [GTD("urn:bars-web-school-info","ResponseHeader",lazy=False)(pname=(ns,"responseHeader"), aname="_responseHeader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","EServiceResult",lazy=False)(pname=(ns,"eServiceResult"), aname="_eServiceResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","unit",lazy=False)(pname=(ns,"returns"), aname="_returns", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._responseHeader = None
                    self._eServiceResult = None
                    self._returns = []
                    return
            Holder.__name__ = "listUnitsResponse_Holder"
            self.pyclass = Holder

    class unit_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:bars-web-school-info"
        type = (schema, "unit")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.unit_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"id"), aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._id = None
                    return
            Holder.__name__ = "unit_Holder"
            self.pyclass = Holder

    class unitsInfoRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:bars-web-school-info"
        type = (schema, "unitsInfoRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.unitsInfoRequest_Def.schema
            TClist = [GTD("urn:bars-web-school-info","RequestHeader",lazy=False)(pname=(ns,"requestHeader"), aname="_requestHeader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","EServiceHeader",lazy=False)(pname=(ns,"eServiceHeader"), aname="_eServiceHeader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"units"), aname="_units", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requestHeader = None
                    self._eServiceHeader = None
                    self._units = []
                    return
            Holder.__name__ = "unitsInfoRequest_Holder"
            self.pyclass = Holder

    class unitsInfoResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:bars-web-school-info"
        type = (schema, "unitsInfoResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.unitsInfoResponse_Def.schema
            TClist = [GTD("urn:bars-web-school-info","ResponseHeader",lazy=False)(pname=(ns,"responseHeader"), aname="_responseHeader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","EServiceResult",lazy=False)(pname=(ns,"eServiceResult"), aname="_eServiceResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","unitInfo",lazy=False)(pname=(ns,"returns"), aname="_returns", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._responseHeader = None
                    self._eServiceResult = None
                    self._returns = []
                    return
            Holder.__name__ = "unitsInfoResponse_Holder"
            self.pyclass = Holder

    class unitInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:bars-web-school-info"
        type = (schema, "unitInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.unitInfo_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"address"), aname="_address", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"telephone"), aname="_telephone", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"email"), aname="_email", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"web_page"), aname="_web_page", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"director"), aname="_director", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._name = None
                    self._address = None
                    self._telephone = None
                    self._email = None
                    self._web_page = None
                    self._director = None
                    return
            Holder.__name__ = "unitInfo_Holder"
            self.pyclass = Holder

    class unitDetailsRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:bars-web-school-info"
        type = (schema, "unitDetailsRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.unitDetailsRequest_Def.schema
            TClist = [GTD("urn:bars-web-school-info","RequestHeader",lazy=False)(pname=(ns,"requestHeader"), aname="_requestHeader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","EServiceHeader",lazy=False)(pname=(ns,"eServiceHeader"), aname="_eServiceHeader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"unit"), aname="_unit", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"format"), aname="_format", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requestHeader = None
                    self._eServiceHeader = None
                    self._unit = None
                    self._format = None
                    return
            Holder.__name__ = "unitDetailsRequest_Holder"
            self.pyclass = Holder

    class unitDetailsResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:bars-web-school-info"
        type = (schema, "unitDetailsResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.unitDetailsResponse_Def.schema
            TClist = [GTD("urn:bars-web-school-info","ResponseHeader",lazy=False)(pname=(ns,"responseHeader"), aname="_responseHeader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","EServiceResult",lazy=False)(pname=(ns,"eServiceResult"), aname="_eServiceResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"returns"), aname="_returns", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._responseHeader = None
                    self._eServiceResult = None
                    self._returns = None
                    return
            Holder.__name__ = "unitDetailsResponse_Holder"
            self.pyclass = Holder

    class listUnitTypesRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:bars-web-school-info"
        type = (schema, "listUnitTypesRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.listUnitTypesRequest_Def.schema
            TClist = [GTD("urn:bars-web-school-info","RequestHeader",lazy=False)(pname=(ns,"requestHeader"), aname="_requestHeader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","EServiceHeader",lazy=False)(pname=(ns,"eServiceHeader"), aname="_eServiceHeader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AreaId"), aname="_AreaId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requestHeader = None
                    self._eServiceHeader = None
                    self._AreaId = None
                    return
            Holder.__name__ = "listUnitTypesRequest_Holder"
            self.pyclass = Holder

    class listUnitTypesResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:bars-web-school-info"
        type = (schema, "listUnitTypesResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.listUnitTypesResponse_Def.schema
            TClist = [GTD("urn:bars-web-school-info","ResponseHeader",lazy=False)(pname=(ns,"responseHeader"), aname="_responseHeader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","EServiceResult",lazy=False)(pname=(ns,"eServiceResult"), aname="_eServiceResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","unitType",lazy=False)(pname=(ns,"returns"), aname="_returns", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._responseHeader = None
                    self._eServiceResult = None
                    self._returns = []
                    return
            Holder.__name__ = "listUnitTypesResponse_Holder"
            self.pyclass = Holder

    class unitType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:bars-web-school-info"
        type = (schema, "unitType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.unitType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"id"), aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._id = None
                    return
            Holder.__name__ = "unitType_Holder"
            self.pyclass = Holder

    class listTerritoriesRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:bars-web-school-info"
        type = (schema, "listTerritoriesRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.listTerritoriesRequest_Def.schema
            TClist = [GTD("urn:bars-web-school-info","RequestHeader",lazy=False)(pname=(ns,"requestHeader"), aname="_requestHeader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","EServiceHeader",lazy=False)(pname=(ns,"eServiceHeader"), aname="_eServiceHeader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requestHeader = None
                    self._eServiceHeader = None
                    return
            Holder.__name__ = "listTerritoriesRequest_Holder"
            self.pyclass = Holder

    class listTerritoriesResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:bars-web-school-info"
        type = (schema, "listTerritoriesResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.listTerritoriesResponse_Def.schema
            TClist = [GTD("urn:bars-web-school-info","ResponseHeader",lazy=False)(pname=(ns,"responseHeader"), aname="_responseHeader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","EServiceResult",lazy=False)(pname=(ns,"eServiceResult"), aname="_eServiceResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:bars-web-school-info","Territory",lazy=False)(pname=(ns,"returns"), aname="_returns", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._responseHeader = None
                    self._eServiceResult = None
                    self._returns = []
                    return
            Holder.__name__ = "listTerritoriesResponse_Holder"
            self.pyclass = Holder

    class Territory_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:bars-web-school-info"
        type = (schema, "Territory")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Territory_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"id"), aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"okato"), aname="_okato", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._id = None
                    self._okato = None
                    return
            Holder.__name__ = "Territory_Holder"
            self.pyclass = Holder

    class listUnitKindsRequest_Dec(ElementDeclaration):
        literal = "listUnitKindsRequest"
        schema = "urn:bars-web-school-info"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("urn:bars-web-school-info","listUnitKindsRequest")
            kw["aname"] = "_listUnitKindsRequest"
            if ns0.listUnitKindsRequest_Def not in ns0.listUnitKindsRequest_Dec.__bases__:
                bases = list(ns0.listUnitKindsRequest_Dec.__bases__)
                bases.insert(0, ns0.listUnitKindsRequest_Def)
                ns0.listUnitKindsRequest_Dec.__bases__ = tuple(bases)

            ns0.listUnitKindsRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "listUnitKindsRequest_Dec_Holder"

    class listUnitKindsResponse_Dec(ElementDeclaration):
        literal = "listUnitKindsResponse"
        schema = "urn:bars-web-school-info"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("urn:bars-web-school-info","listUnitKindsResponse")
            kw["aname"] = "_listUnitKindsResponse"
            if ns0.listUnitKindsResponse_Def not in ns0.listUnitKindsResponse_Dec.__bases__:
                bases = list(ns0.listUnitKindsResponse_Dec.__bases__)
                bases.insert(0, ns0.listUnitKindsResponse_Def)
                ns0.listUnitKindsResponse_Dec.__bases__ = tuple(bases)

            ns0.listUnitKindsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "listUnitKindsResponse_Dec_Holder"

    class listUnitsRequest_Dec(ElementDeclaration):
        literal = "listUnitsRequest"
        schema = "urn:bars-web-school-info"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("urn:bars-web-school-info","listUnitsRequest")
            kw["aname"] = "_listUnitsRequest"
            if ns0.listUnitsRequest_Def not in ns0.listUnitsRequest_Dec.__bases__:
                bases = list(ns0.listUnitsRequest_Dec.__bases__)
                bases.insert(0, ns0.listUnitsRequest_Def)
                ns0.listUnitsRequest_Dec.__bases__ = tuple(bases)

            ns0.listUnitsRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "listUnitsRequest_Dec_Holder"

    class listUnitsResponse_Dec(ElementDeclaration):
        literal = "listUnitsResponse"
        schema = "urn:bars-web-school-info"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("urn:bars-web-school-info","listUnitsResponse")
            kw["aname"] = "_listUnitsResponse"
            if ns0.listUnitsResponse_Def not in ns0.listUnitsResponse_Dec.__bases__:
                bases = list(ns0.listUnitsResponse_Dec.__bases__)
                bases.insert(0, ns0.listUnitsResponse_Def)
                ns0.listUnitsResponse_Dec.__bases__ = tuple(bases)

            ns0.listUnitsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "listUnitsResponse_Dec_Holder"

    class unitsInfoRequest_Dec(ElementDeclaration):
        literal = "unitsInfoRequest"
        schema = "urn:bars-web-school-info"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("urn:bars-web-school-info","unitsInfoRequest")
            kw["aname"] = "_unitsInfoRequest"
            if ns0.unitsInfoRequest_Def not in ns0.unitsInfoRequest_Dec.__bases__:
                bases = list(ns0.unitsInfoRequest_Dec.__bases__)
                bases.insert(0, ns0.unitsInfoRequest_Def)
                ns0.unitsInfoRequest_Dec.__bases__ = tuple(bases)

            ns0.unitsInfoRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "unitsInfoRequest_Dec_Holder"

    class unitsInfoResponse_Dec(ElementDeclaration):
        literal = "unitsInfoResponse"
        schema = "urn:bars-web-school-info"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("urn:bars-web-school-info","unitsInfoResponse")
            kw["aname"] = "_unitsInfoResponse"
            if ns0.unitsInfoResponse_Def not in ns0.unitsInfoResponse_Dec.__bases__:
                bases = list(ns0.unitsInfoResponse_Dec.__bases__)
                bases.insert(0, ns0.unitsInfoResponse_Def)
                ns0.unitsInfoResponse_Dec.__bases__ = tuple(bases)

            ns0.unitsInfoResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "unitsInfoResponse_Dec_Holder"

    class unitDetailsRequest_Dec(ElementDeclaration):
        literal = "unitDetailsRequest"
        schema = "urn:bars-web-school-info"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("urn:bars-web-school-info","unitDetailsRequest")
            kw["aname"] = "_unitDetailsRequest"
            if ns0.unitDetailsRequest_Def not in ns0.unitDetailsRequest_Dec.__bases__:
                bases = list(ns0.unitDetailsRequest_Dec.__bases__)
                bases.insert(0, ns0.unitDetailsRequest_Def)
                ns0.unitDetailsRequest_Dec.__bases__ = tuple(bases)

            ns0.unitDetailsRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "unitDetailsRequest_Dec_Holder"

    class unitDetailsResponse_Dec(ElementDeclaration):
        literal = "unitDetailsResponse"
        schema = "urn:bars-web-school-info"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("urn:bars-web-school-info","unitDetailsResponse")
            kw["aname"] = "_unitDetailsResponse"
            if ns0.unitDetailsResponse_Def not in ns0.unitDetailsResponse_Dec.__bases__:
                bases = list(ns0.unitDetailsResponse_Dec.__bases__)
                bases.insert(0, ns0.unitDetailsResponse_Def)
                ns0.unitDetailsResponse_Dec.__bases__ = tuple(bases)

            ns0.unitDetailsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "unitDetailsResponse_Dec_Holder"

    class listUnitTypesRequest_Dec(ElementDeclaration):
        literal = "listUnitTypesRequest"
        schema = "urn:bars-web-school-info"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("urn:bars-web-school-info","listUnitTypesRequest")
            kw["aname"] = "_listUnitTypesRequest"
            if ns0.listUnitTypesRequest_Def not in ns0.listUnitTypesRequest_Dec.__bases__:
                bases = list(ns0.listUnitTypesRequest_Dec.__bases__)
                bases.insert(0, ns0.listUnitTypesRequest_Def)
                ns0.listUnitTypesRequest_Dec.__bases__ = tuple(bases)

            ns0.listUnitTypesRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "listUnitTypesRequest_Dec_Holder"

    class listUnitTypesResponse_Dec(ElementDeclaration):
        literal = "listUnitTypesResponse"
        schema = "urn:bars-web-school-info"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("urn:bars-web-school-info","listUnitTypesResponse")
            kw["aname"] = "_listUnitTypesResponse"
            if ns0.listUnitTypesResponse_Def not in ns0.listUnitTypesResponse_Dec.__bases__:
                bases = list(ns0.listUnitTypesResponse_Dec.__bases__)
                bases.insert(0, ns0.listUnitTypesResponse_Def)
                ns0.listUnitTypesResponse_Dec.__bases__ = tuple(bases)

            ns0.listUnitTypesResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "listUnitTypesResponse_Dec_Holder"

    class listTerritoriesRequest_Dec(ElementDeclaration):
        literal = "listTerritoriesRequest"
        schema = "urn:bars-web-school-info"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("urn:bars-web-school-info","listTerritoriesRequest")
            kw["aname"] = "_listTerritoriesRequest"
            if ns0.listTerritoriesRequest_Def not in ns0.listTerritoriesRequest_Dec.__bases__:
                bases = list(ns0.listTerritoriesRequest_Dec.__bases__)
                bases.insert(0, ns0.listTerritoriesRequest_Def)
                ns0.listTerritoriesRequest_Dec.__bases__ = tuple(bases)

            ns0.listTerritoriesRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "listTerritoriesRequest_Dec_Holder"

    class listTerritoriesResponse_Dec(ElementDeclaration):
        literal = "listTerritoriesResponse"
        schema = "urn:bars-web-school-info"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("urn:bars-web-school-info","listTerritoriesResponse")
            kw["aname"] = "_listTerritoriesResponse"
            if ns0.listTerritoriesResponse_Def not in ns0.listTerritoriesResponse_Dec.__bases__:
                bases = list(ns0.listTerritoriesResponse_Dec.__bases__)
                bases.insert(0, ns0.listTerritoriesResponse_Def)
                ns0.listTerritoriesResponse_Dec.__bases__ = tuple(bases)

            ns0.listTerritoriesResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "listTerritoriesResponse_Dec_Holder"

# end class ns0 (tns: urn:bars-web-school-info)
